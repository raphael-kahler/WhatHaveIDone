<Window x:Class="Whid.Views.Main.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        d:DataContext="{d:DesignInstance designtime:DesignSummaries, IsDesignTimeCreatable=True}"
        xmlns:designtime="clr-namespace:Whid.Views.Main.DesignTime"
        xmlns:local="clr-namespace:Whid"
        xmlns:converters="clr-namespace:Whid.Converters"
        mc:Ignorable="d"
        WindowStyle="None"
        ResizeMode="CanResize"
        Title="Whid"
        Height="450" Width="800">
    <Window.Resources>
        <converters:HiddenOnFalse x:Key="HiddenOnFalse"/>
        <converters:HiddenOnTrue x:Key="HiddenOnTrue"/>
        <converters:CollapsedOnFalse x:Key="CollapsedOnFalse"/>
        <converters:CollapsedOnTrue x:Key="CollapsedOnTrue"/>

        <Style x:Key="MainMenu"
               TargetType="Menu">
            <Setter Property="Background" Value="{StaticResource bg_primary}"/>
            <Setter Property="Foreground" Value="{StaticResource on_primary}"/>
            <Setter Property="BorderBrush" Value="{StaticResource bg_primary}"/>
        </Style>

        <Style x:Key="MLB_MenuItem" TargetType="{x:Type MenuItem}">
            <!--<Setter Property="Foreground" Value="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType={x:Type Menu}}}"/>-->
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type MenuItem}">
                        <Border x:Name="Border"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition x:Name="Col0" MinWidth="17" Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup"/>
                                    <ColumnDefinition Width="Auto" SharedSizeGroup="MenuTextColumnGroup"/>
                                    <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup"/>
                                    <ColumnDefinition x:Name="Col3" Width="14"/>
                                </Grid.ColumnDefinitions>

                                <!-- ContentPresenter to show an Icon if needed -->
                                <ContentPresenter Grid.Column="0" Margin="4,0,6,0" x:Name="Icon" VerticalAlignment="Center" ContentSource="Icon"/>

                                <!-- Glyph is a checkmark if needed for a checkable menu -->
                                <Grid Grid.Column="0" Visibility="Hidden" Margin="4,0,6,0" x:Name="GlyphPanel" VerticalAlignment="Center">
                                    <Path x:Name="GlyphPanelpath" VerticalAlignment="Center" Fill="{TemplateBinding Foreground}" Data="M0,2 L0,4.8 L2.5,7.4 L7.1,2.8 L7.1,0 L2.5,4.6 z" FlowDirection="LeftToRight"/>
                                </Grid>

                                <!-- Content for the menu text etc -->
                                <ContentPresenter Grid.Column="1"
                                                  Margin="{TemplateBinding Padding}"
                                                  x:Name="HeaderHost"
                                                  RecognizesAccessKey="True"
                                                  ContentSource="Header"/>

                                <!-- Content for the menu IGT -->
                                <ContentPresenter Grid.Column="2"
                                                  Margin="8,1,8,1"
                                                  x:Name="IGTHost"
                                                  ContentSource="InputGestureText"
                                                  VerticalAlignment="Center"/>

                                <!-- Arrow drawn path which points to the next level of the menu -->
                                <Grid Grid.Column="3" Margin="4,0,6,0" x:Name="ArrowPanel" VerticalAlignment="Center">
                                    <Path x:Name="ArrowPanelPath" HorizontalAlignment="Right" VerticalAlignment="Center" Fill="{TemplateBinding Foreground}" Data="M0,0 L0,8 L4,4 z"/>
                                </Grid>

                                <!-- The Popup is the body of the menu which expands down or across depending on the level of the item -->
                                <Popup IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}"
                                       Placement="Right"
                                       x:Name="SubMenuPopup"
                                       Focusable="false"
                                       PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">
                                    <Border x:Name="SubMenuBorder"
                                            BorderBrush="{StaticResource bg_primary}"
                                            Background="{StaticResource bg_primary}"
                                            BorderThickness="1">
                                        <Grid x:Name="SubMenu" Grid.IsSharedSizeScope="True">
                                            <!-- StackPanel holds children of the menu. This is set by IsItemsHost=True -->
                                            <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle"/>
                                        </Grid>
                                    </Border>
                                </Popup>
                            </Grid>
                        </Border>

                        <!-- These triggers re-configure the four arrangements of MenuItem to show different levels of menu via Role -->
                        <ControlTemplate.Triggers>
                            <!-- Role = TopLevelHeader : this is the root menu item in a menu; the Popup expands down -->
                            <Trigger Property="Role" Value="TopLevelHeader">
                                <Setter Property="Padding" Value="6,1,6,1"/>
                                <Setter Property="Placement" Value="Bottom" TargetName="SubMenuPopup"/>
                                <Setter Property="MinWidth" Value="0" TargetName="Col0"/>
                                <Setter Property="Width" Value="Auto" TargetName="Col3"/>
                                <Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
                                <Setter Property="Visibility" Value="Collapsed" TargetName="GlyphPanel"/>
                                <Setter Property="Visibility" Value="Collapsed" TargetName="IGTHost"/>
                                <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
                            </Trigger>

                            <!-- Role = TopLevelItem :  this is a child menu item from the top level without any child items-->
                            <Trigger Property="Role" Value="TopLevelItem">
                                <Setter Property="Padding" Value="6,1,6,1"/>
                                <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
                            </Trigger>

                            <!-- Role = SubMenuHeader : this is a child menu item which does not have children -->
                            <Trigger Property="Role" Value="SubmenuHeader">
                                <Setter Property="DockPanel.Dock" Value="Top"/>
                                <Setter Property="Padding" Value="0,2,0,2"/>
                            </Trigger>

                            <!-- Role = SubMenuItem : this is a child menu item which has children-->
                            <Trigger Property="Role" Value="SubmenuItem">
                                <Setter Property="DockPanel.Dock" Value="Top"/>
                                <Setter Property="Padding" Value="0,2,0,2"/>
                                <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
                            </Trigger>
                            <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                                <Setter Property="PopupAnimation" Value="None" TargetName="SubMenuPopup"/>
                            </Trigger>

                            <!-- If no Icon is present the we collapse the Icon Content -->
                            <Trigger Property="Icon" Value="{x:Null}">
                                <Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
                            </Trigger>

                            <!-- The GlyphPanel contains the CheckMark -->
                            <Trigger Property="IsChecked" Value="true">
                                <Setter Property="Visibility" Value="Visible" TargetName="GlyphPanel"/>
                                <Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
                            </Trigger>

                            <!-- Using the system colors for the Menu Highlight and IsEnabled-->
                            <Trigger Property="IsHighlighted" Value="true">
                                <Setter Property="Background" Value="{StaticResource bg_primary_light}" TargetName="Border"/>
                                <Setter Property="Foreground" Value="{StaticResource on_primary_light}"/>
                                <Setter Property="BorderBrush" Value="{StaticResource bg_primary_light}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" Value="{StaticResource bg_primary}"/>
                                <Setter Property="Foreground" Value="{StaticResource on_primary}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="MainMenuHeader"
               BasedOn="{StaticResource MLB_MenuItem}"
               TargetType="MenuItem">
            <Setter Property="Background" Value="{StaticResource bg_primary}"/>
            <Setter Property="Foreground" Value="{StaticResource on_primary}"/>
            <Setter Property="BorderBrush" Value="{StaticResource bg_primary}"/>
        </Style>
        <Style x:Key="MainMenuItem"
               BasedOn="{StaticResource MLB_MenuItem}"
               TargetType="MenuItem">
            <Setter Property="Background" Value="{StaticResource bg_primary_dark}"/>
            <Setter Property="Foreground" Value="{StaticResource on_primary_dark}"/>
            <Setter Property="BorderBrush" Value="{StaticResource bg_primary}"/>
        </Style>
        <Style x:Key="PrimaryButton"
               TargetType="Button">
            <Setter Property="Background" Value="{StaticResource bg_primary}"/>
            <Setter Property="Foreground" Value="{StaticResource on_primary}"/>
        </Style>
        <Style x:Key="WindowTitleButton"
               BasedOn="{StaticResource PrimaryButton}"
               TargetType="Button">
            <Setter Property="Width" Value="20"/>
            <Setter Property="Height" Value="20"/>
            <Setter Property="Margin" Value="5,0,7,0"/>
            <Setter Property="BorderThickness" Value="0"/>
        </Style>
        <Style x:Key="HideOnInactiveButton"
               BasedOn="{StaticResource PrimaryButton}"
               TargetType="Button" >
            <Style.Triggers>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Visibility" Value="Hidden" />
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="SummaryTypePageButton"
               TargetType="Button"
               BasedOn="{StaticResource HideOnInactiveButton}">
            <Setter Property="FontSize" Value="14"/>
            <Setter Property="Padding" Value="10,2"/>
            <Setter Property="Margin" Value="5,0"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
        </Style>
        <Style x:Key="SummaryEditButton"
               BasedOn="{StaticResource PrimaryButton}"
               TargetType="Button">
            <Setter Property="Width" Value="27"/>
            <Setter Property="Padding" Value="0,2"/>
            <Setter Property="Margin" Value="4,0"/>
            <Setter Property="FontSize" Value="11"/>
        </Style>
        <Style x:Key="PrimaryBackgroundGrid"
               TargetType="Grid">
            <Setter Property="Background" Value="{StaticResource bg_primary_light}"/>
        </Style>
        <Style x:Key="WindowBorder"
               TargetType="Border">
            <Setter Property="Background" Value="{StaticResource bg_primary}"/>
        </Style>
        <Style x:Key="ContentBorder"
               TargetType="Border">
            <Setter Property="Background" Value="{StaticResource bg_primary_light}"/>
        </Style>
        <Style x:Key="SummaryViewStyle"
               TargetType="{x:Type Border}">
            <Setter Property="BorderBrush" Value="Gray"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Style.Triggers>
                <DataTrigger Binding="{Binding Highlighted}" Value="true">
                    <Setter Property="Background" Value="{StaticResource bg_primary_light}"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>
        <DataTemplate x:Key="SummaryViewTemplate">
            <Border x:Name="SummaryBorder"
                    Style="{StaticResource SummaryViewStyle}">
                <StackPanel Orientation="Vertical"
                            Margin="4">
                    <Grid>
                        <TextBlock Text="{Binding Period.FormatString}"
                                   FontWeight="Bold"/>
                        <StackPanel Orientation="Horizontal"
                                    HorizontalAlignment="Right">
                            <Button Content="✎"
                                    Command="{Binding StartEditCommand}"
                                    Style="{StaticResource SummaryEditButton}"
                                    Visibility="{Binding Highlighted, Converter={StaticResource CollapsedOnFalse}}"/>
                            <Button Content="🗑"
                                    Command="{Binding DeleteCommand}"
                                    Style="{StaticResource SummaryEditButton}"
                                    Visibility="{Binding EditMode, Converter={StaticResource CollapsedOnFalse}}"/>
                            <Button Content="✕"
                                    Command="{Binding QuitEditCommand}"
                                    Style="{StaticResource SummaryEditButton}"
                                    Visibility="{Binding EditMode, Converter={StaticResource CollapsedOnFalse}}"/>
                            <Button Content="✓"
                                    Command="{Binding SaveCommand}"
                                    Style="{StaticResource SummaryEditButton}"
                                    Visibility="{Binding EditMode, Converter={StaticResource CollapsedOnFalse}}"/>
                        </StackPanel>
                    </Grid>
                    <Grid>
                        <TextBlock Text="{Binding Content}"
                                    TextWrapping="Wrap"
                                    Visibility="{Binding EditMode, Converter={StaticResource CollapsedOnTrue}}"/>
                        <TextBox Text="{Binding Content}"
                                    TextWrapping="Wrap"
                                    AcceptsReturn="True"
                                    AcceptsTab="True"
                                    SpellCheck.IsEnabled="True"
                                    Visibility="{Binding EditMode, Converter={StaticResource CollapsedOnFalse}}"/>
                    </Grid>
                </StackPanel>
            </Border>
        </DataTemplate>
    </Window.Resources>
    <WindowChrome.WindowChrome>
        <WindowChrome
            CaptionHeight="1"
            CornerRadius ="0"
            ResizeBorderThickness="4"
            GlassFrameThickness="0">
        </WindowChrome>
    </WindowChrome.WindowChrome>
    <Border BorderThickness="0">
        <Border.Style>
            <Style TargetType="Border" BasedOn="{StaticResource WindowBorder}">
                <Setter Property="Background" Value="{StaticResource bg_primary}"/>
                <Style.Triggers>
                    <!-- Add to avoid border disappearing when window is maximised -->
                    <DataTrigger Binding="{Binding WindowState, RelativeSource={RelativeSource AncestorType=Window}}"
                                 Value="Maximized">
                        <Setter Property="Margin" Value="7"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding WindowState, RelativeSource={RelativeSource AncestorType=Window}}"
                                 Value="Normal">
                        <Setter Property="Margin" Value="0"/>
                    </DataTrigger>
                </Style.Triggers>
            </Style>
        </Border.Style>
        <DockPanel>
            <Border DockPanel.Dock="Top"
                    Padding="0,2"
                    Style="{StaticResource WindowBorder}"
                    MouseLeftButtonDown="DragWindow">
                <Grid>
                    <Menu IsMainMenu="True"
                          Style="{StaticResource MainMenu}"
                          HorizontalAlignment="Left"
                          VerticalAlignment="Center">
                        <MenuItem Header="File"
                                  Style="{StaticResource MainMenuHeader}">
                            <MenuItem Header="Exit"
                                      Click="CloseWindow"
                                      Style="{StaticResource MainMenuItem}"
                                      InputGestureText="Alt+F4"/>
                        </MenuItem>
                        <MenuItem Header="View"
                                  Style="{StaticResource MainMenuHeader}">
                            <MenuItem Header="Color Scheme"
                                      Style="{StaticResource MainMenuItem}">
                                <MenuItem Header="Green"
                                          Style="{StaticResource MainMenuItem}"
                                          Tag="LightGreenIndigo"
                                          Click="SelectColorScheme"/>
                                <MenuItem Header="Brown"
                                          Style="{StaticResource MainMenuItem}"
                                          Tag="BrownOrange"
                                          Click="SelectColorScheme"/>
                            </MenuItem>
                        </MenuItem>
                        <MenuItem Header="Help"
                                  Style="{StaticResource MainMenuHeader}">
                            <MenuItem Header="About"
                                      Style="{StaticResource MainMenuItem}"
                                      Click="ShowAboutPage"/>
                        </MenuItem>
                    </Menu>
                    <StackPanel Orientation="Horizontal"
                                MouseDown="DragWindow"
                                HorizontalAlignment="Right">
                        <Button Content="🗕"
                                Click="MinimizeWindow"
                                Style="{StaticResource WindowTitleButton}"/>
                        <Button Content="🗖"
                                x:Name="MaximizeWindowButton"
                                Click="MaximizeWindow"
                                Style="{StaticResource WindowTitleButton}"/>
                        <Button Content="🗙"
                                Click="CloseWindow"
                                Style="{StaticResource WindowTitleButton}"/>
                    </StackPanel>
                </Grid>
            </Border>

            <Border DockPanel.Dock="Bottom"
                    Style="{StaticResource ContentBorder}">
                <StackPanel Orientation="Horizontal">
                <Label Content="Summary type:"/>
                <ComboBox ItemsSource="{Binding PeriodTypes}"
                          DisplayMemberPath="Name"
                          VerticalAlignment="Center"
                          SelectedItem="{Binding SummaryCreation.PeriodType}"/>
                <Label Content="Start date:"
                       Margin="10,0,0,0"/>
                <DatePicker SelectedDate="{Binding SummaryCreation.PeriodTime}"
                            VerticalAlignment="Center"/>
                <Button Command="{Binding CreateNewSummaryCommand}"
                        Padding="7,0"
                        Margin="15,0,0,0"
                        Style="{StaticResource PrimaryButton}"
                        Content="Add new"/>
            </StackPanel>
            </Border>

            <Grid Style="{StaticResource PrimaryBackgroundGrid}">
                <Grid.RowDefinitions>
                    <RowDefinition MaxHeight="40" MinHeight="40"/>
                    <RowDefinition/>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                <Grid Grid.Row="0" Grid.Column="0">
                    <Button Content="◀"
                            Style="{StaticResource SummaryTypePageButton}"
                            Command="{Binding ShowBiggerSummariesCommand}"
                            HorizontalAlignment="Left"/>
                    <Label Content="{Binding MainSummaryType.Name, Mode=OneWay}"
                           VerticalAlignment="Center"
                           HorizontalAlignment="Center"/>
                </Grid>
                <Grid Grid.Row="0" Grid.Column="1">
                    <Button Content="▶"
                            Style="{StaticResource SummaryTypePageButton}"
                            Command="{Binding ShowSmallerSummariesCommand}"
                            HorizontalAlignment="Right"/>
                    <Label Content="{Binding MainSummaryType.Encompasses.Name, Mode=OneWay}"
                           VerticalAlignment="Center"
                           HorizontalAlignment="Center"/>
                </Grid>

                <ListView x:Name="SummaryListView"
                          Grid.Row="1" Grid.Column="0"
                          HorizontalContentAlignment="Stretch"
                          ItemsSource="{Binding Summaries}"
                          ItemTemplate="{StaticResource SummaryViewTemplate}"
                          SelectedItem="{Binding SelectedSummary}"/>
                <ListView x:Name="EncompassedSummaryListView"
                          Grid.Row="1" Grid.Column="1"
                          HorizontalContentAlignment="Stretch"
                          SelectionChanged="BringSelectionIntoView"
                          SelectedItem="{Binding SelectedEncompassedSummary}"
                          ItemTemplate="{StaticResource SummaryViewTemplate}"
                          ItemsSource="{Binding EncompassedSummaries}"/>
            </Grid>
        </DockPanel>
    </Border>
</Window>
